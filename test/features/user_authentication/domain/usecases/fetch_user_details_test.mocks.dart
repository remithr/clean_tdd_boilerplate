// Mocks generated by Mockito 5.1.0 from annotations
// in clear_architecture/test/features/user_authentication/domain/usecases/fetch_user_details_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:clear_architecture/core/error/failures.dart' as _i6;
import 'package:clear_architecture/features/user_authentication/domain/entities/user_details_entity.dart'
    as _i7;
import 'package:clear_architecture/features/user_authentication/domain/entities/user_id_param.dart'
    as _i8;
import 'package:clear_architecture/features/user_authentication/domain/repositories/user_repository.dart'
    as _i2;
import 'package:clear_architecture/features/user_authentication/domain/usecases/fetch_user_details.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUserRepository_0 extends _i1.Fake implements _i2.UserRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [FetchUserDetails].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchUserDetails extends _i1.Mock implements _i4.FetchUserDetails {
  MockFetchUserDetails() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeUserRepository_0()) as _i2.UserRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserDetailsEntity>> call(
          _i8.UserIDParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i3.Either<_i6.Failure, _i7.UserDetailsEntity>>.value(
                      _FakeEither_1<_i6.Failure, _i7.UserDetailsEntity>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.UserDetailsEntity>>);
}
